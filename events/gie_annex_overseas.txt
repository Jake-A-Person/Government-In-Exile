namespace = gie_annex_overseas

#marks states but doesnt annex them
#run while still in civil war
gie_annex_overseas.1 = {
	type = country_event
	hidden = yes

	immediate = {
		set_variable = var_old_gov
		random_diplomatic_play = {
			limit = {
				is_diplomatic_play_type = dp_revolution
				target = root
			}
			initiator = {
				set_variable = var_rev_gov
			}
		}

		capital = {	
			trigger_event = gie_annex_overseas.2
		}

		#clean up
		random_country = {
			limit = {
				has_variable = var_old_gov
			}
			remove_variable = var_old_gov
		}

		#revolutionary goverment
		random_country = {
			limit = {
				has_variable = var_rev_gov
			}
			remove_variable = var_rev_gov
		}

	}

}

#recursively marks all adjacent states such that all of the connected sates are marked 
gie_annex_overseas.2 = {
	type = state_event
	hidden = yes

	immediate = {
		
		#old goverment
		random_country = {
			limit = {
				has_variable = var_old_gov
			}
			save_scope_as = old_gov
		}

		#revolutionary goverment
		random_country = {
			limit = {
				has_variable = var_rev_gov
			}
			save_scope_as = rev_gov
		}

		#for each adjacent state that we havent seen yet that are owned by the old or revolutionary nation or a subject of old
		#using every_neighbouring_state will trigger the event more then once on some states this avoids that
		while = {
			#checks for state owned by old or revolutionary nation or subject of the old government
			limit = {
				any_neighbouring_state = {
					and = {
						or = {
							owner = scope:old_gov
							owner = scope:rev_gov
							owner = { 
								overlord = scope:old_gov
							}
						}
						not = {has_modifier = adj}	
					}				
				} 
			}
			#checks if a state next to current one has a vaild owner and is not found then mark it as found and trigger the current event on the new found state
			random_neighbouring_state = {
				limit = {
					and = {
						or = {
							owner = scope:old_gov
							owner = scope:rev_gov
							owner = { 
								overlord = scope:old_gov
							}
						}
						not = {has_modifier = adj}	
					}	
				}
				add_modifier = adj
				#recursion
				trigger_event = gie_annex_overseas.2
			}
		}
	}
}

#annexs the marked states and handles subjects
#run after civ war and on exiled gov
gie_annex_overseas.3 = {
	type = country_event
	hidden = yes

	immediate = {
		#gets the revolutionary nation
		random_country = {
			limit = {
				has_diplomatic_pact = {
					who = root
					type = gie_return_target
				}
				not = {this = root}
			}
			#exiled gov annex all states not connected to capital
			every_scope_state = {
				limit = {
					not = {has_modifier = adj}
				}
				set_state_owner = root
			}
			
			#for each subject with a capital that is not connected to the old capital of the old goverment (so is it over seas i.e. congo for belgium) 
			every_subject_or_below = {
				limit = {
					capital = {
						not = {has_modifier = adj}
					}
				}

				#for each state in said subject that is connected (main land) new goveremnt annexes it
				every_scope_state = {
					limit = {
						has_modifier = adj
					}
					set_state_owner = prevprev
					remove_modifier = adj
				}

				#chage overlord to be exiled goverment
				if = {
					limit = {
						is_subject_type = subject_type_protectorate
					}
					make_independent = yes
					root = {
						create_diplomatic_pact = {
							country = prev
							type = protectorate
						}
					}
				}

				
				if = {
					limit = {
						is_subject_type = subject_type_puppet
					}
					make_independent = yes
					root = {
						create_diplomatic_pact = {
							country = prev
							type = puppet
						}
					}
				}

				
				if = {
					limit = {
						is_subject_type = subject_type_dominion
					}
					make_independent = yes
					root = {
						create_diplomatic_pact = {
							country = prev
							type = dominion
						}
					}
				}

				
				if = {
					limit = {
						is_subject_type = subject_type_vassal
					}
					make_independent = yes
					root = {
						create_diplomatic_pact = {
							country = prev
							type = vassal
						}
					}
				}

				
				if = {
					limit = {
						is_subject_type = subject_type_tributary
					}
					make_independent = yes
					root = {
						create_diplomatic_pact = {
							country = prev
							type = tributary
						}
					}
				}
			}

			#as all subjects not connected have been tranfered in above block these are only connected subjects
			every_subject_or_below = {
				#all states that are connected get annexed by exiled goverment
				every_scope_state = {
					limit = {
						has_modifier = adj
					}
					set_state_owner = root
					remove_modifier = adj
				}
			}

			#clean up modifers on sates
			every_scope_state = {
				remove_modifier = adj
			}
		}
	}
}